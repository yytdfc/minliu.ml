{"version":3,"sources":["assets/flower.svg","assets/happybirthday.mp3","Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Timer","state","birthday","Date","d","h","m","s","passed","updateTimer","timeLeft","_this","setState","document","getElementById","play","Math","abs","floor","_this2","this","setInterval","_this3","get_timer","react_default","a","createElement","react","className","src","flower","id","song","Component","App","src_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1680be9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flower.9c7352f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/happybirthday.3a35854d.mp3\";","import React, { Component, Fragment } from 'react';\nimport flower from './assets/flower.svg';\nimport song from './assets/happybirthday.mp3'\nimport './App.css';\n\nclass Timer extends Component {\n  state = {\n    birthday: (new Date(2018, 11, 3, 0, 0, 0)),\n    // birthday: (new Date(2018, 10, 26, 4, 43, 0)),\n    d: \"\",\n    h: \"\",\n    m: \"\",\n    s: \"\",\n    passed: false,\n  }\n\n  componentWillMount(){\n    this.updateTimer();\n    setInterval(\n      ()=>{\n        this.updateTimer()\n      },1000\n    )\n  }\n\n  updateTimer=()=>{\n    var timeLeft = this.state.birthday - (new Date());\n    var passed = (timeLeft<0)\n    if(passed && !this.state.passed){\n      var birthday = new Date(1993, 11, 9);\n      this.setState({\n        birthday: birthday,\n      });\n      timeLeft = birthday - (new Date());\n    }\n    if(this.state.passed){\n      var audio = document.getElementById(\"audio\");\n      audio.play();\n    }\n    timeLeft = Math.abs(Math.floor(timeLeft / 1000));\n    this.setState({\n      d: Math.floor(timeLeft / 86400),\n      h: Math.floor(timeLeft % 86400 / 3600),\n      m: Math.floor(timeLeft % 3600 / 60),\n      s: Math.floor(timeLeft % 60),\n      passed: passed,\n    });\n  };\n\n  render() {\n    const get_timer=()=>{\n      if(this.state.d>0)\n        return(\n          <Fragment>\n            {this.state.d}天\n            {this.state.h}小时\n            <br/>\n            {this.state.m}分\n            {this.state.s}秒\n          </Fragment>\n        )\n      else if(this.state.h>0)\n        return(\n          <Fragment>\n            {this.state.h}小时\n            {this.state.m}分\n            {this.state.s}秒\n          </Fragment>\n        )\n      else if(this.state.m>0)\n        return(\n          <Fragment>\n            {this.state.m}分\n            {this.state.s}秒\n          </Fragment>\n        )\n      else\n        return(\n          <Fragment>\n            {this.state.s}秒\n          </Fragment>\n        )\n    }\n    if(!this.state.passed)\n      return (\n        <div className=\"Timer\">\n          <img src={flower} className=\"Timer-Logo\"/>\n          <p className=\"Timer-Text\">\n            距离小可爱\n            <br/>\n            <b>25 th</b>\n            <br/>\n            周岁生日还有\n            <br/>\n            {get_timer()}\n          </p>\n          <audio id=\"audio\" src={song}/>\n        </div>\n      )\n    else\n      return (\n        <div className=\"Timer\">\n          <img src={flower} className=\"Timer-Logo\"/>\n          <p className=\"Timer-Text\">\n            小可爱出生\n            <br/>\n            {get_timer()}\n          </p>\n          <audio id=\"audio\" src={song}/>\n        </div>\n      )\n  }\n}\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport Timer from './Timer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Timer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}